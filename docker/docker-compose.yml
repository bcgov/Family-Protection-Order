version: '3'
services:
  # 
  # fpo-web
  # 
  fpo-web:
    image: fpo-angular-on-nginx
    environment:
      - API_URL=${API_URL}
      - WEB_BASE_HREF=${WEB_BASE_HREF}
      - IpFilterRules=${IpFilterRules}
      - RealIpFrom=${RealIpFrom}
    networks:
      - fpo
    ports:
      - "${WEB_HTTP_PORT}:8080"
    depends_on:
      - fpo-api

  fpo-web-dev:
    image: fpo-angular-dev
    environment:
      - API_URL=${API_URL}
      - WEB_BASE_HREF=${WEB_BASE_HREF}
      - DEV_MODE=false
      - NODE_ENV=development
      - NPM_CONFIG_LOGLEVEL=notice
      - NPM_RUN=start
    networks:
      - fpo
    ports:
      - "${WEB_HTTP_PORT}:8080"
      - 5858:5858
    volumes:
      - "../fpo-web/src:/opt/app-root/src/src"
      - "../fpo-web/package.json:/opt/app-root/src/package.json"
    depends_on:
      - fpo-api

  # 
  # fpo-api
  #-------------------------------------------------
  # The API performs the migrations on the database.
  # Therefore, it needs to come up after the database
  # has had time to fully initialize.
  #
  # We are using a simple sleep command to do this 
  # for the moment; refer to the `command` section 
  # of the configuration for details.  It would be 
  # nice to implement a more deterministic solution.
  # 
  fpo-api:
    image: fpo-django
    environment:
      - DATABASE_SERVICE_NAME=${DATABASE_SERVICE_NAME}
      - DATABASE_ENGINE=${DATABASE_ENGINE}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - PDF_SERVICE_URL=${PDF_SERVICE_URL}
      - OVERRIDE_USER_ID=${OVERRIDE_USER_ID}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=${DJANGO_DEBUG}
      - DJANGO_LOG_LEVEL=${DJANGO_LOG_LEVEL}
      - FPO_DB_SERVICE_HOST=${DATABASE_SERVICE_NAME}
      - FPO_DB_SERVICE_PORT=5432
    volumes:
      - ../fpo-api/api:/opt/app-root/src/api
      - ../fpo-api/templates:/opt/app-root/src/templates
    networks:
      - fpo
    ports:
      - "${API_HTTP_PORT}:8080"
    depends_on:
      - fpo-db
    command: >
      /bin/bash -c "
        echo Waiting for the database service to start up ...;
        sleep 10;
        /usr/libexec/s2i/run;"

  # 
  # schema-spy
  #-------------------------------------------------
  # Needs to wait for the schema to be created/migrated
  # by the API server; it's not enough to wait for the
  # database to be available.
  #
  # We are using a simple sleep command to do this 
  # for the moment; refer to the `command` section 
  # of the configuration for details.  It would be 
  # nice to implement a more deterministic solution.
  #
  schema-spy:
    image: schema-spy
    environment:
      - DATABASE_SERVICE_NAME=${DATABASE_SERVICE_NAME}
      - POSTGRESQL_DATABASE=${POSTGRESQL_DATABASE}
      - POSTGRESQL_USER=${POSTGRESQL_USER}
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
    networks:
      - fpo
    ports:
      - 8082:8080
    depends_on:
      - fpo-db
    command: >
      /bin/sh -c "
        echo sleeping ...;
        sleep 20;
        ./start.sh;"
  # 
  # fpo-db
  # 
  fpo-db:
    image: registry.access.redhat.com/rhscl/postgresql-95-rhel7@sha256:155cf81a3d3a8bbcab3a1f61b177cab75a4105306146d172ef8fb29488cf58b4
    environment:
      - POSTGRESQL_USER=${POSTGRESQL_USER}
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRESQL_DATABASE=${POSTGRESQL_DATABASE}
    networks:
      - fpo
    ports:
      - 5432:5432
    # volumes:
      # - fpo-data:/var/lib/pgsql/data 

  # 
  # fpo-pdf
  # 
  fpo-pdf:
    image: aquavitae/weasyprint
    networks:
      - fpo
    ports:
      - 8083:5001

networks:
  fpo:

# volumes:
  # fpo-data: